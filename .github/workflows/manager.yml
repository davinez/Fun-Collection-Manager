name: Manager API Build and Test

on:
  push:
    paths:
      - 'src/Manager/**'
      - 'tests/Manager.IntegrationTests/**'
    branches:    
      - main
      - release/*

  pull_request:
    paths:
      - 'src/Manager/**'
      - 'tests/Manager.IntegrationTests/**'
    branches:    
      - main
      - release/*
  
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  GITHUB_USERNAME: ${{ github.repository_owner }}
  IMAGE_NAME: manager-api
  BUILD_CONFIGURATION: Release

jobs:
 # Id of the job (random string)
 test-manager:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: [ '8.0.x' ]
    defaults:
          run:
            working-directory: './'

    steps:  

    # Using the credentials of the app registered (service principal) as "GitHubActions" in EntraID   
    # "clientId": "<GUID>",
    # "clientSecret": "<PrincipalSecret>",
    # "subscriptionId": "<GUID>",
    # "tenantId": "<GUID>"
    - name: 'Login to Azure'
      uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Retrieve secret from Key Vault
      uses: azure/CLI@v1
      with:
        inlineScript: |
          Azure-KeyVault-Endpoint=$(az keyvault secret show --name "Azure-KeyVault-Endpoint" --vault-name "fucoma-config-vault" --query "value" -o tsv)
          echo "::add-mask::$Azure-KeyVault-Endpoint"
          echo "AZURE_KEY_VAULT_ENDPOINT="$Azure-KeyVault-Endpoint >> $GITHUB_ENV

          Azure-Client-Id=$(az keyvault secret show --name "Azure-Client-Id" --vault-name "fucoma-config-vault" --query "value" -o tsv)
          echo "::add-mask::$Azure-Client-Id"
          echo "AZURE_CLIENT_ID="$Azure-Client-Id >> $GITHUB_ENV

          Azure-Client-Secret=$(az keyvault secret show --name "Azure-Client-Secret" --vault-name "fucoma-config-vault" --query "value" -o tsv)
          echo "::add-mask::$Azure-Client-Secret"
          echo "AZURE_CLIENT_SECRET="$Azure-Client-Secret >> $GITHUB_ENV

          Azure-Tenant-Id=$(az keyvault secret show --name "Azure-Tenant-Id" --vault-name "fucoma-config-vault" --query "value" -o tsv)
          echo "::add-mask::$Azure-Tenant-Id"
          echo "AZURE_CLIENT_SECRET="$Azure-Tenant-Id >> $GITHUB_ENV

    - name: 'Checkout repository'
      uses: actions/checkout@v4

    - name: Setup dotnet ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    # You can test your matrix by printing the current dotnet version
    - name: Display dotnet version
      run: dotnet --version  
     
    - name: Install dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build

    - name: Test with the dotnet CLI
      run: dotnet test --no-restore --results-directory "TestResults-${{ matrix.dotnet-version }}" --configuration Release

    - name: Upload dotnet test results
      uses: actions/upload-artifact@v4
      with:
        name: dotnet-results-${{ matrix.dotnet-version }}
        path: TestResults-${{ matrix.dotnet-version }}
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

 build-and-push-manager-image:
    runs-on: ubuntu-latest
    needs: [test-manager]
    defaults:
          run:
            working-directory: './'
    permissions:
      contents: read
      packages: write

    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}       

      - name: Add SHORT_SHA env property with commit short sha
        run: echo "SHORT_SHA=`echo ${{ github.sha }} | cut -c1-8`" >> $GITHUB_ENV

      # If using variable ${{ github.repository }} => The owner and repository name. For example, octocat/Hello-World
      - name: 'Build, tag, and push image to GitHub Container Registry (Packages)'
        # | called a Literal Block Scalar which preserves new lines and trailing spaces
        # > called a Folded Block Scalar which converts new lines into spaces
        # \ break same command in lines
        run: |
          docker build . \
            --build-arg BUILD_CONFIGURATION=${{ env.BUILD_CONFIGURATION }} \
            --tag ${{ env.REGISTRY }}/${{ env.GITHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${SHORT_SHA} \
            -f src/Manager/Manager.API/Dockerfile 
          docker push ${{ env.REGISTRY }}/${{ env.GITHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${SHORT_SHA}


    # - uses: actions/checkout@v2
    # - name: Setup .NET
    #   uses: actions/setup-dotnet@v1
    #   with:
    #     dotnet-version: '8.0.x'
    #     include-prerelease: true

    # - name: Build with dotnet
    #   run: dotnet build ./eShopOnWeb.sln --configuration Release
    
    # - name: Test with dotnet
    #   run: dotnet test ./eShopOnWeb.sln --configuration Release



